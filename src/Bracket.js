import { TModel } from "./TModel.js";
import { Viewport } from "./Viewport.js";

/**
 * Represents a node in a tree generated by the BracketGenerator from a large list,
 * used to restrict calculations to only the visible branches.
 */
class Bracket extends TModel {
    constructor(parent) {
        super("BI");
        this.parent = parent;
        this.visibilityStatus = { isVisible: true };
    }
    
    canHaveDom() {
        return false;
    }

    shouldBeBracketed() {
        return false;
    }
    
    excludeDefaultStyling() {
        return true;
    }
    
    isIncluded() {
        return false;
    }

    getWidth() {
        return this.getContentWidth();
    }

    getHeight() {
        return this.getContentHeight();
    }
    
    getMinWidth() {
        return this.bottomBaseWidth;
    }

    getBaseWidth() {
        return this.bottomBaseWidth;
    }
    
    getBaseHeight() {
        return this.topBaseHeight;
    }
    
    useContentWidth() {
        return this.getRealParent().useContentWidth();
    }
    
    useContentHeight() {
        return this.getRealParent().useContentHeight();
    }    

    getContainerOverflowMode() {
        return this.getRealParent().getContainerOverflowMode();
    }
    
    getTopBaseHeight() {
        return this.topBaseHeight;
    }
    
    isVisible() {
        return this.visibilityStatus ? this.visibilityStatus.top && this.visibilityStatus.bottom : false;
    }
    
    getBracketThreshold() {
        return this.getRealParent().getBracketSize();
    }
    
    addToParentVisibleChildren() {}

    createViewport() {
        this.viewport = this.viewport || new Viewport();

        this.viewport.xNext = this.x;
        this.viewport.xNorth = this.x;
        this.viewport.xEast = this.x;
        this.viewport.xSouth = this.x;
        this.viewport.xWest = this.x;
        
        this.viewport.absX = this.getRealParent().viewport.absX;
        this.viewport.absY = this.getRealParent().viewport.absY;

        this.viewport.scrollTop = this.getRealParent().viewport.scrollTop;
        this.viewport.scrollLeft = this.getRealParent().viewport.scrollLeft;
        this.viewport.xOverflowReset = this.getRealParent().viewport.xOverflowReset;        
        this.viewport.xOverflowLimit = this.getRealParent().viewport.xOverflowLimit;

        this.viewport.yNext = this.y;
        this.viewport.yNorth = this.y;
        this.viewport.yWest = this.y;
        this.viewport.yEast = this.y;

        this.viewport.ySouth = this.getRealParent().viewport.ySouth;
        
        this.viewport.container = this;
                
        return this.viewport;   
    }
   
    getRealParent() {
        return this.realParent;
    }
    
    getRightMargin() {
        return 0;
    }
    
    getBottomMargin() {
        return 0; 
    }
    
    calcAbsolutePosition(x, y) {
        this.absX = x + this.getRealParent().absX;
        this.absY = y + this.getRealParent().absY;
    }

    shouldCalculateChildren() {
        
        const result = (this.isVisible() && this.getDirtyLayout() !== false) || this.currentStatus === 'new' || this.isNowVisible;
        this.currentStatus = undefined;
        return result;
    }

    getDirtyLayout() {
        return this.getRealParent().managesOwnScroll ? this.getRealParent().backupDirtyLayout : this.dirtyLayout;
    }

    validateVisibilityInParent() {
        return true;
    }
    
    adjustViewport() {        
        this.viewport.xEast = Math.max(this.viewport.xEast, this.getRealParent().viewport.xEast);
        this.viewport.ySouth = Math.max(this.viewport.ySouth, this.getRealParent().viewport.ySouth);
    }

    getChildren() {
        return this.allChildrenList;
    }
}

export { Bracket };
